import streamlit as st
import numpy as np
import pandas as pd
import joblib

# Charger le mod√®le et le scaler
model = joblib.load('random_forest_aya.pkl')
scaler = joblib.load('scaler.pkl')

# Titre de l'application
st.set_page_config(page_title="Pr√©diction Cardiaque", layout="centered")
st.title("üíì Pr√©diction de Maladie Cardiaque")
st.markdown("Ce mod√®le estime la probabilit√© qu‚Äôun patient ait une **maladie cardiaque** √† partir de donn√©es cliniques.")

# Image illustrative
st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Heart_anterior_exterior_view.svg/1200px-Heart_anterior_exterior_view.svg.png", 
         width=300, caption="Illustration du c≈ìur humain")

# Champs utilisateur dans la barre lat√©rale
st.sidebar.header("üìù Informations du Patient")

age = st.sidebar.slider('√Çge', 29, 77, 50)
sex = st.sidebar.radio("Sexe", ['Homme', 'Femme'])
sex = 1 if sex == 'Homme' else 0
cp = st.sidebar.selectbox("Type de douleur thoracique", [0, 1, 2, 3])
trestbps = st.sidebar.slider("Tension au repos (mm Hg)", 90, 200, 120)
chol = st.sidebar.slider("Cholest√©rol (mg/dl)", 100, 600, 200)
fbs = st.sidebar.radio("Glyc√©mie √† jeun > 120 mg/dl", ['Oui', 'Non'])
fbs = 1 if fbs == 'Oui' else 0
restecg = st.sidebar.selectbox("ECG au repos", [0, 1, 2])
thalach = st.sidebar.slider("Fr√©quence cardiaque max", 70, 210, 150)
exang = st.sidebar.radio("Angine d'effort", ['Oui', 'Non'])
exang = 1 if exang == 'Oui' else 0
oldpeak = st.sidebar.slider("D√©pression ST", 0.0, 6.0, 1.0)
slope = st.sidebar.selectbox("Pente du ST", [0, 1, 2])
ca = st.sidebar.slider("Nb de vaisseaux color√©s", 0, 3, 0)
thal = st.sidebar.selectbox("Thalass√©mie", [1, 2, 3])

# Pr√©paration des donn√©es
input_data = np.array([[age, sex, cp, trestbps, chol, fbs, restecg, thalach,
                        exang, oldpeak, slope, ca, thal]])

# Mise √† l'√©chelle
input_scaled = scaler.transform(input_data)

# Bouton de pr√©diction
if st.button("üîç Pr√©dire"):
    prediction = model.predict(input_scaled)[0]
    proba = model.predict_proba(input_scaled)[0][1]

    st.subheader("üîé R√©sultat de la Pr√©diction")
    if prediction == 1:
        st.markdown(f"‚ùó **Risque d√©tect√©** : Probabilit√© de maladie cardiaque **{proba:.2%}**")
        st.error("Consultez un m√©decin pour un diagnostic approfondi.")
    else:
        st.markdown(f"‚úÖ **Pas de signe de maladie cardiaque** : Probabilit√© **{proba:.2%}**")
        st.success("Aucun sympt√¥me apparent d√©tect√©.")

    # R√©capitulatif des entr√©es
    st.subheader("üìã R√©sum√© des Informations Saisies")
    features = ["√Çge", "Sexe", "Douleur thoracique", "Tension", "Cholest√©rol", "FBS", "ECG", "Thalach",
                "Exang", "Oldpeak", "Slope", "CA", "Thal"]
    values = [age, sex, cp, trestbps, chol, fbs, restecg, thalach,
              exang, oldpeak, slope, ca, thal]
    df = pd.DataFrame([values], columns=features)
    st.dataframe(df)

# Info mod√®le
st.markdown("---")
st.markdown("""
### ‚ÑπÔ∏è √Ä propos du mod√®le
Ce mod√®le est bas√© sur un algorithme **Random Forest Classifier** entra√Æn√© sur des donn√©es m√©dicales.
Il a obtenu une **AUC de 1.00** pendant l'entra√Ænement, ce qui indique une excellente performance sur l'ensemble de test.
""")
